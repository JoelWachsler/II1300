
struct Mov
{
    int speed;
    bool running;
    int prio;
};

struct Global
{
    Mov movement;
};

Global global;

mutex finished_mutex;
mutex processMutex;

task move()
{
    OnFwd(OUT_A, global.movement.speed);
    Wait(100);
}

task finished()
{
    Follows(move);

    Acquire(finished_mutex);

    global.movement.running = false;
    global.movement.prio = 0;

    Release(finished_mutex);
}

void processMovement(int speed, int prio)
{
    if (prio < global.movement.prio)
        return;

    Acquire(processMutex);

    StopTask(move);

    Mov mov;
    mov.speed = speed;
    mov.prio = prio;
    mov.running = true;

    global.movement = mov;

    StartTask(move);

    Release(processMutex);
}

task thread()
{
    processMovement(10, 0);
    Wait(5000);
    processMovement(10, 0);
}

task thread2()
{
    Wait(2000);
    processMovement(50, 1);
}

task main()
{
    Mov dummy;
    dummy.prio = 0;
    dummy.running = false;
    dummy.speed = 0;

    global.movement = dummy;

    Precedes(thread, thread2);
}
